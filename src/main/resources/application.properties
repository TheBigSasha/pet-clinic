quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=petclinic
%prod.quarkus.datasource.password=changeme
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://postgresql:5432/petclinicdb
quarkus.datasource.jdbc.min-size=5
quarkus.datasource.jdbc.max-size=15

%dev.quarkus.hibernate-orm.sql-load-script=import.sql
%prod.quarkus.hibernate-orm.sql-load-script=import.sql

quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.database.generation=drop-and-create


quarkus.kubernetes.service-type=load-balancer

quarkus.http.enable-compression=true
quarkus.http.enable-decompression=true
quarkus.qute.strict-rendering=true


# Configure OIDC

%prod.quarkus.oidc.auth-server-url=http://keycloak-petclinic:8080/realms/quarkus
quarkus.oidc.client-id=backend-service
quarkus.oidc.credentials.secret=secret
#TODO: Fix client secret!


# Tell Dev Services for Keycloak to import the realm file
# This property is not effective when running the application in JVM or Native modes but only in dev and test modes.

quarkus.keycloak.devservices.realm-path=quarkus-realm.json


# Configure OIDC Client

quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}
quarkus.oidc-client.client-id=${quarkus.oidc.client-id}
quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}
quarkus.oidc-client.grant.type=jwt
quarkus.oidc.application-type=web-app



# Configure REST Clients

%prod.port=8080
%dev.port=8080
%test.port=8081


org.quarkus.samples.petclinic.auth.RestClientWithOidcClientFilter/mp-rest/url=http://localhost:${port}/protected
org.quarkus.samples.petclinic.auth.RestClientWithTokenPropagationFilter/mp-rest/url=http://localhost:${port}/protected


quarkus.oidc.tls.verification=none

keycloak.auth-server-url=${quarkus.oidc.auth-server-url}
keycloak.realm=${quarkus.oidc-client.auth-server-url}

quarkus.oidc.logout.path=/logout
